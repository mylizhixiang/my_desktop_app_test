name: CentOS 7 Flutter Build Pipeline
on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: centos:7
      options: >-
        --security-opt seccomp=unconfined
        --dns 8.8.8.8
        --dns 1.1.1.1
        -v /tmp/.X11-unix:/tmp/.X11-unix
        -v /github/workspace:/workspace

    steps:
    # ================= 环境隔离阶段 =================
    - name: 禁用宿主Node注入
      env:
        ACTIONS_RUNNER_HOOK_JOB_STARTED: /bin/true  # 阻断GitHub自动注入Node环境
      run: |
        echo "执行环境隔离..."
        rm -f /etc/profile.d/nodejs.sh
        sed -i '/\/__e\/node/d' /etc/environment

    # ================= 系统基础配置 =================
    - name: 系统初始化
      run: |
        # DNS固化配置
        chattr -i /etc/resolv.conf
        echo "nameserver 8.8.8.8" > /etc/resolv.conf
        echo "nameserver 1.1.1.1" >> /etc/resolv.conf
        chattr +i /etc/resolv.conf

        # 换源与存储库配置
        rm -rf /etc/yum.repos.d/*
        curl -sSLo /etc/yum.repos.d/CentOS-Base.repo \
          https://repo.huaweicloud.com/repository/conf/CentOS-7-reg.repo
        sed -i 's/^mirrorlist/#mirrorlist/g;s/^#baseurl=/baseurl=/g' /etc/yum.repos.d/CentOS-Base.repo

        # 安装基础工具
        yum install -y deltarpm epel-release yum-utils

    # ================= GLIBC 兼容层 =================
    - name: 安装新版GLIBC
      run: |
        # 安装开发依赖
        yum install -y wget gcc-c++ make bison
        
        # 下载并编译GLIBC 2.28
        cd /tmp
        wget https://ftp.gnu.org/gnu/glibc/glibc-2.28.tar.gz
        tar xzf glibc-2.28.tar.gz
        mkdir glibc-build && cd glibc-build
        ../glibc-2.28/configure --prefix=/usr \
          --disable-profile \
          --enable-add-ons \
          --with-headers=/usr/include \
          --with-binutils=/usr/bin
        make -j$(nproc)
        make install
        
        # 重建库缓存
        ldconfig -v | grep libc.so

    # ================= 工具链升级 =================
    - name: 升级编译工具链
      run: |
        # 安装SCL仓库
        yum install -y centos-release-scl

        # 安装开发工具集
        yum --enablerepo=extras install -y \
          devtoolset-10 \
          llvm-toolset-7 \
          rh-nodejs16

        # 永久启用工具链
        tee /etc/profile.d/toolchain.sh <<EOF
        source /opt/rh/devtoolset-10/enable
        source /opt/rh/llvm-toolset-7/enable
        source /opt/rh/rh-nodejs16/enable
        export PATH="/opt/rh/rh-nodejs16/root/usr/bin:\$PATH"
        EOF
        source /etc/profile.d/toolchain.sh

        # 验证工具版本
        gcc --version | head -n1
        node --version

    # ================= 图形依赖安装 =================
    - name: 安装X11依赖
      run: |
        # X Window系统
        yum groupinstall -y "X Window System"
        
        # 图形驱动
        yum install -y \
          mesa-dri-drivers \
          xorg-x11-server-Xvfb \
          gtk3-devel \
          dbus-x11

        # 初始化DBUS
        dbus-uuidgen > /var/lib/dbus/machine-id

    # ================= Flutter环境 =================
    - name: 配置Flutter SDK
      run: |
        cd /opt
        wget -q --show-progress --tries=5 \
          https://storage.googleapis.com/flutter_infra_release/releases/stable/linux/flutter_linux_3.29.0-stable.tar.xz
        tar xf flutter_linux_3.29.0-stable.tar.xz
        
        # 全局路径配置
        tee /etc/profile.d/flutter.sh <<EOF
        export FLUTTER_HOME=/opt/flutter
        export PATH="\$FLUTTER_HOME/bin:\$PATH"
        EOF
        source /etc/profile.d/flutter.sh
        
        # 初始化Flutter
        flutter doctor -v
        flutter precache --force --target-platform=linux-x64

    # ================= 构建准备阶段 =================
    - name: 准备代码库
      uses: actions/checkout@v4
      with:
        path: /workspace
        fetch-depth: 0
      
    - name: 修复项目权限
      run: |
        chmod -R 755 /workspace/linux
        cd /workspace
        flutter pub get

    # ================= 核心构建阶段 =================
    - name: 执行Flutter构建
      run: |
        # 启动虚拟显示器
        Xvfb :99 -screen 0 1280x1024x24 -ac +extension GLX +render -noreset &
        export DISPLAY=:99

        # 在隔离环境中构建
        scl enable devtoolset-10 rh-nodejs16 -- \
          flutter build linux \
            --release \
            --target-platform linux-x64 \
            --dart-define=FORCE_SYSTEM_LINK=1 \
            --dynamic-linker=/lib64/ld-linux-x86-64.so.2 \
            --split-debug-info=build/debug_info \
            --verbose

    # ================= RPM打包 =================
    - name: 生成安装包
      run: |
        # 安装打包工具
        yum install -y rpm-build createrepo
        
        # 创建临时构建目录
        RPMBUILD=$(mktemp -d -p /tmp rpmbuild.XXXXXX)
        mkdir -p $RPMBUILD/{BUILD,RPMS,SOURCES,SPECS,SRPMS}

        # 生成spec文件
        tee $RPMBUILD/SPECS/flutter_app.spec <<'EOF'
        %define _build_name_ver $(date +%s)
        Name:           flutter-desktop
        Version:        1.0
        Release:        %{_build_name_ver}%{?dist}
        Summary:        CentOS 7 Compatible Flutter Application
        License:        MIT
        URL:            https://github.com/mylizhixiang/my_desktop_app_test
        Requires:       gtk3 mesa-libGL

        %description
        Flutter application with CentOS 7 compatibility layer.

        %install
        mkdir -p %{buildroot}/opt/myapp
        cp -r /workspace/build/linux/x64/release/bundle/* %{buildroot}/opt/myapp/

        %files
        /opt/myapp/

        %post
        desktop-file-install --dir=/usr/share/applications %{buildroot}/opt/myapp/*.desktop
        gtk-update-icon-cache /usr/share/icons/hicolor/
        EOF

        # 执行RPM构建
        rpmbuild -bb \
          --define "_topdir $RPMBUILD" \
          --target x86_64 \
          $RPMBUILD/SPECS/flutter_app.spec

        # 收集构建产物
        mkdir -p /workspace/artifacts
        find $RPMBUILD/RPMS -name '*.rpm' -exec cp {} /workspace/artifacts \;

    # ================= 产物上传 =================
    - name: 上传RPM包
      uses: actions/upload-artifact@v4
      with:
        name: centos7-flutter-rpm
        path: /workspace/artifacts/*.rpm
        retention-days: 7
