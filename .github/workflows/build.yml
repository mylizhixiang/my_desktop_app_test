name: CentOS Application Builder

on:
  push:
    branches: [ main,master ]

env:
  FLUTTER_VERSION: "3.29.0"
  NODE_VERSION: "v16.20.2"

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: centos:7
      options: >-
        --privileged
        -v /var/run/docker.sock:/var/run/docker.sock
        -v /usr/bin/docker:/usr/bin/docker

    steps:
      # ===== [1] 初始化容器环境 =====
      - name: Setup Base System
        run: |
          # 修复 yum 源（必须第一步执行）
          sed -i.bak \
            -e 's/mirrorlist/#mirrorlist/g' \
            -e 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' \
            /etc/yum.repos.d/CentOS-*

          # 安装核心工具
          yum install -y \
            centos-release-scl epel-release \
            curl wget tar xz which

      # ===== [2] 安装开发工具链 =====
      - name: Setup Build Tools
        run: |
          # ================ 仓库修复阶段 ================
          # 标准基础仓库修复
          sed -i.bak \
          -e 's/mirrorlist/#mirrorlist/g' \
          -e 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' \
          -e 's/\$releasever/7/g' \
          /etc/yum.repos.d/CentOS-*.repo
    
          # SCL特殊路径修复
          sed -i \
          -e 's|baseurl=.*centos/7/sclo/.*/|baseurl=http://vault.centos.org/centos/7/sclo/x86_64/|g' \
          -e 's/mirrorlist/#mirrorlist/g' \
          /etc/yum.repos.d/CentOS-SCLo-*.repo
        
          # 全局强制版本锁定
          find /etc/yum.repos.d/ -name "*.repo" -exec sed -i 's/\$releasever/7/g' {} +
    
          # ================ 缓存系统重置 ================
          yum clean all
          rpm --rebuilddb
          find /var/cache/yum -type f -delete
          yum makecache
    
          # ================ 工具链安装 ================
          yum install -y \
          devtoolset-9 \
          devtoolset-9-gcc-c++ \
          clang cmake ninja-build \
          gtk3-devel libxkbcommon-x11-devel
    
          source /opt/rh/devtoolset-9/enable

      # ===== [3] 安装 Node.js =====
      - name: Install Node.js
        run: |
          wget https://nodejs.org/dist/$NODE_VERSION/node-$NODE_VERSION-linux-x64.tar.xz
          tar -xJf node-$NODE_VERSION-linux-x64.tar.xz -C /opt
          ln -sf /opt/node-$NODE_VERSION-linux-x64/bin/node /usr/local/bin/node
          ln -sf /opt/node-$NODE_VERSION-linux-x64/bin/npm /usr/local/bin/npm

      # ===== [4] 安装 Flutter SDK =====
      - name: Install Flutter
        run: |
          FLUTTER_URL="https://storage.googleapis.com/flutter_infra_release/releases/stable/linux/flutter_linux_${FLUTTER_VERSION}-stable.tar.xz"
          wget -q "$FLUTTER_URL" -O flutter.tar.xz
          tar -xJf flutter.tar.xz -C /opt
          echo "/opt/flutter/bin" >> $GITHUB_PATH

      # ===== [5] 构建应用程序 =====
      - name: Build Application
        run: |
          # 确保 devtoolset 环境生效
          source /opt/rh/devtoolset-9/enable
          
          flutter config --enable-linux-desktop
          flutter pub get
          flutter build linux --release

          # 创建构建目录
          mkdir -p build/artifacts
          cp -r build/linux/x64/release/bundle/* build/artifacts/

      # ===== [6] RPM 打包 =====
      - name: Generate RPM Package
        run: |-
          # 配置 RPM 构建环境
          cat > ~/.rpmmacros << EOF
          %_topdir /home/runner/rpmbuild
          %_tmppath /home/runner/rpmbuild/tmp
          EOF

          mkdir -p ~/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS}

          # 创建 SPEC 文件
          cat << 'EOF' > ~/rpmbuild/SPECS/my-desktop-app.spec
          Name: my-desktop-app
          Version: 1.0.0
          Release: 1%{?dist}
          Summary: Application built on CentOS 7
          License: MIT
          URL: https://github.com/mylizhixiang/my_desktop_app_test

          %description
          CentOS 7 compatible application package.

          %install
          mkdir -p %{buildroot}/opt/my-desktop-app
          cp -r /__w/your-repo/your-repo/build/artifacts/* %{buildroot}/opt/my-desktop-app

          %files
          /opt/my-desktop-app/*
          EOF

          # 构建 RPM
          rpmbuild -bb ~/rpmbuild/SPECS/my-desktop-app.spec
          mkdir -p artifacts
          cp ~/rpmbuild/RPMS/x86_64/*.rpm artifacts/

      # ===== [7] 上传产物 =====
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: centos-packages
          path: |
            build/artifacts/
            artifacts/*.rpm
