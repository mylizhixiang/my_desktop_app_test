name: CentOS 7 Desktop Build Pipeline
on: 
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: centos:7
      options: >-
        --security-opt seccomp=unconfined
        --dns 8.8.8.8
        --device /dev/dri
        -v /tmp/.X11-unix:/tmp/.X11-unix
        -v /usr/share/fonts:/usr/share/fonts:ro  
        -v /github/workspace:/workspace

    steps:
    # ================= 阶段0：宿主机检出 =================
    - name: 宿主机代码检出
      uses: actions/checkout@v4
      with:
        path: /github/workspace
        container: null  # 强制使用宿主环境
        persist-credentials: false  # 避免权限冲突

    # ================= 阶段1：系统级修复 =================
    - name: 系统基础配置
      run: |
        # 强制刷新DNS配置
        chattr -i /etc/resolv.conf
        echo "nameserver 8.8.8.8" > /etc/resolv.conf
        echo "nameserver 1.1.1.1" >> /etc/resolv.conf
        chattr +i /etc/resolv.conf

        # 华为云源深度配置
        rm -rf /etc/yum.repos.d/CentOS-*
        curl -sSL -o /etc/yum.repos.d/CentOS-Base.repo \
          https://repo.huaweicloud.com/repository/conf/CentOS-7-reg.repo
        sed -i -e 's/^mirrorlist/#mirrorlist/' -e 's/^#baseurl=/baseurl=/' /etc/yum.repos.d/CentOS-Base.repo
        
        # 扩展源配置
        rpm --import https://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-7
        yum install -y epel-release
        rpm --import https://packages.microsoft.com/keys/microsoft.asc
        curl -sSL -o /etc/yum.repos.d/msprod.repo \
          https://packages.microsoft.com/config/rhel/7/prod.repo

        # 强制缓存重建
        yum clean all
        yum makecache fast

    # ================= 阶段2：工具链升级 =================
    - name: GLIBC兼容处理
      run: |
        # 安装开发工具链（解决GLIBC问题）
        yum install -y centos-release-scl
        yum --enablerepo=extras install -y devtoolset-10 llvm-toolset-7

        # 永久化工具链配置
        echo 'source /opt/rh/devtoolset-10/enable' >> /etc/bashrc
        echo 'source /opt/rh/llvm-toolset-7/enable' >> /etc/bashrc
        
        # 动态链接库修复
        ln -sf /opt/rh/devtoolset-10/root/usr/lib64/libstdc++.so.6.0.28 /usr/lib64/libstdc++.so.6
        ldconfig

        # 验证环境
        echo "--- GCC Version ---"
        gcc --version
        echo "--- GLIBCXX Versions ---"
        strings /usr/lib64/libstdc++.so.6 | grep GLIBCXX

    # ================= 阶段3：环境依赖安装 =================
    - name: 安装系统依赖
      run: |
        # 核心依赖包
        yum install -y \
          xorg-x11-server-Xvfb \ 
          mesa-dri-drivers \
          gtk3-devel \
          dbus-x11 \
          clang \
          cmake \
          ninja-build \
          --nogpgcheck

        # GNOME环境支持
        yum groupinstall -y "X Window System" "GNOME"
        systemctl unmask dbus.service
        dbus-uuidgen > /var/lib/dbus/machine-id

    # ================= 阶段4：Flutter环境 =================
    - name: 配置Flutter SDK
      run: |
        cd /opt
        wget -q --tries=5 --retry-connrefused \
          https://storage.googleapis.com/flutter_infra_release/releases/stable/linux/flutter_linux_3.29.0-stable.tar.xz
        tar xf flutter_linux_3.29.0-stable.tar.xz

        # 全局路径配置
        echo 'export FLUTTER_HOME=/opt/flutter' >> /etc/profile.d/flutter.sh
        echo 'export PATH="$PATH:$FLUTTER_HOME/bin"' >> /etc/profile.d/flutter.sh
        source /etc/profile.d/flutter.sh

        # 依赖预下载
        flutter precache --force --target-platform=linux-x64

    # ================= 阶段5：构建准备 =================
    - name: 工作目录处理
      run: |
        mkdir -p /workspace/build
        cp -R /github/workspace/{pubspec.*,lib,assets,linux} /workspace
        cd /workspace

        # 修复文件权限
        chmod -R 755 linux
        flutter pub get

    # ================= 阶段6：构建执行 =================
    - name: 带环境构建
      run: |
        # Xvfb虚拟显示
        Xvfb :99 -screen 0 1280x1024x24 -ac +extension GLX +render -noreset &
        export DISPLAY=:99
        
        # 专用构建配置文件
        echo 'ENABLE_VSYNC=false' >> .env
        echo 'FORCE_SOFTWARE_RENDERING=true' >> .env

        # 带工具链环境构建
        scl enable devtoolset-10 llvm-toolset-7 -- \
          flutter build linux \
            --release \
            --target-platform linux-x64 \
            --split-debug-info=build/debug_info \
            --dart-define=FORCE_SYSTEM_LINK=1 \
            --dynamic-linker=/lib64/ld-linux-x86-64.so.2 \
            --target-arch x64 \
            --target-sysroot / \
            --verbose

    # ================= 阶段7：RPM打包 =================
    - name: 生成安装包
      run: |
        # RPM依赖安装
        yum install -y rpm-build redhat-rpm-config

        # 准备构建环境
        RPMBUILD=$(mktemp -d -p /tmp rpmbuild.XXXXXX)
        mkdir -p $RPMBUILD/{BUILD,RPMS,SOURCES,SPECS,SRPMS}

        # Spec文件生成
        cat <<EOF > $RPMBUILD/SPECS/flutter_app.spec
        %define _build_name_ver $(date +%Y%m%d)
        Name:       flutter-desktop-app
        Version:    %{_build_name_ver}
        Release:    1%{?dist}
        Summary:    CentOS 7 Optimized Flutter App
        License:    Commercial
        URL:        https://github.com/mylizhixiang/my_desktop_app_test
        Requires:   gtk3, mesa-libGL

        %description
        CentOS 7 compatible Flutter desktop application

        %install
        mkdir -p %{buildroot}/opt/myapp
        cp -r /workspace/build/linux/x64/release/bundle/* %{buildroot}/opt/myapp/

        %files
        /opt/myapp/

        %post
        # Desktop文件处理
        desktop-file-install --dir=/usr/share/applications %{buildroot}/opt/myapp/*.desktop
        gtk-update-icon-cache /usr/share/icons/hicolor/
        EOF

        # RPM构建命令
        rpmbuild -bb \
          --define "_topdir $RPMBUILD" \
          --target x86_64 \
          $RPMBUILD/SPECS/flutter_app.spec

        # 产物收集
        mkdir -p $GITHUB_WORKSPACE/artifacts
        find $RPMBUILD/RPMS -name '*.rpm' -exec cp {} $GITHUB_WORKSPACE/artifacts/

    # ================= 阶段8：产物上传 =================
    - name: 上传产成品
      uses: actions/upload-artifact@v4
      with:
        name: centos7-flutter-rpm
        path: artifacts/*.rpm
        retention-days: 5
