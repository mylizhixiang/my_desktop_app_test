name: Build Flutter Linux App

on:
  push:
    branches: [main,master]  # 指定触发分支
  pull_request:
    branches: [main,master]
  # 若需通过标签触发发布（可选）
#   release:
#     types: [created]

jobs:
  build-linux:
    runs-on: ubuntu-latest
    container:
      image: centos:7
      # 禁止挂载宿主机的 Node 环境
      options: --privileged --volume /__e 

    steps:
      # ----- 手工安装低版本 Node.js -----
      - name: Install Legacy Node.js (v16)
        run: |
          # CentOS 7 兼容的 Node 16 安装方式
          curl -sL https://rpm.nodesource.com/setup_16.x | bash -
          yum -y install nodejs

      # ------------ 环境准备 ------------
      - name: Checkout code
        uses: actions/checkout@v4

      # ------------ 安装构建依赖 ------------
      - name: Install CentOS dependencies
        run: |
          yum -y update
          yum -y install centos-release-scl epel-release
          yum -y install devtoolset-9-gcc* clang cmake ninja-build gtk3-devel \
            libxkbcommon-x11-devel libstdc++-static rpm-build redhat-rpm-config
          # 激活新版本的 GCC
          echo "source /opt/rh/devtoolset-9/enable" >> ~/.bashrc

      # ------------ 配置 Flutter SDK ------------
      - name: Install Flutter SDK manually
        run: |
          wget https://storage.googleapis.com/flutter_infra_release/releases/stable/linux/flutter_linux_3.22.4-stable.tar.xz
          tar -xf flutter_linux_3.22.4-stable.tar.xz
          echo "$GITHUB_WORKSPACE/flutter/bin" >> $GITHUB_PATH
          # Flutter 初始化
          flutter doctor

      # ------------ 配置 Linux 构建支持 ------------
      - name: Enable Linux desktop
        run: flutter config --enable-linux-desktop

      # ------------ 代码测试（可选） ------------
    #   - name: Run tests
    #     run: flutter test

      # ------------ 构建 Release 版本 ------------
      - name: Build Linux app for CentOS
        run: |
          source /opt/rh/devtoolset-9/enable  # 确保使用新编译器
          flutter build linux --release --target-platform=linux-x64

      # ------------ 打包 RPM 安装包 ------------
      - name: Create RPM package
        run: |
          # 设置目录结构
          mkdir -p ~/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS}
          # 复制构建产到 BUILD 目录（注意目录名！假设项目名是 "my-desktop-app"）
          cp -r build/linux/x64/release/bundle ~/rpmbuild/BUILD/my-desktop-app
          # 完整写入 SPEC 文件（直接替换名称即可使用）
          echo "%define _topdir $(echo ~)/rpmbuild
          Name: my-desktop-app
          Version: 1.0.0
          Release: 1%{?dist}
          Summary: My Flutter App for CentOS
          License: MIT
          URL: https://github.com/mylizhixiang/my_desktop_app_test
          Requires: gtk3, libstdc++
          Maintainer: Lizhixiang <1107664795@qq.com>

          %description
          My cross-platform Flutter app built for CentOS.

          %install
          mkdir -p %{buildroot}/opt/my-desktop-app
          cp -r %{_builddir}/my-desktop-app/* %{buildroot}/opt/my-desktop-app
          # 创建启动器符号链接
          mkdir -p %{buildroot}/usr/bin
          ln -s /opt/my-desktop-app/myapp %{buildroot}/usr/bin/my-desktop-app

          %files
           /opt/my-desktop-app/*
          /usr/bin/my-desktop-app
          " > ~/rpmbuild/SPECS/my-desktop-app.spec  # 注意 SPEC 文件名保持一致

          # 构建 RPM
           rpmbuild -bb ~/rpmbuild/SPECS/my-desktop-app.spec --verbose

          # 移动生成的 RPM 到显式目录
          mkdir -p rpm_packages
          cp ~/rpmbuild/RPMS/x86_64/*.rpm rpm_packages/

      # ------------ 上传构建产物（到 Artifacts） ------------
      - name: Upload artifacts
        uses: actions/upload-artifact@v4.3.1
        with:
          name: centos-package
          path: rpm_packages/*.rpm
            

      # ------------ （可选）发布到 GitHub Releases ------------
    #   - name: Create GitHub Release
    #     if: github.event_name == 'release' && github.event.action == 'created' 
    #     uses: softprops/action-gh-release@v1
    #     with:
    #       files: |
    #         linux_build/*.deb
    #       draft: false
    #       prerelease: false
    #     env:
    #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
